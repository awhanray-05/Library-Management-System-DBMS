-- Library Management System Database Schema
-- Oracle SQL Script

-- Create tables for Library Management System

-- Members table
CREATE TABLE members (
    member_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone VARCHAR2(15),
    address VARCHAR2(200),
    membership_type VARCHAR2(20) DEFAULT 'REGULAR' CHECK (membership_type IN ('REGULAR', 'PREMIUM', 'STUDENT')),
    join_date DATE DEFAULT SYSDATE,
    status VARCHAR2(10) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED')),
    password_hash VARCHAR2(255) NOT NULL
);

-- Books table
CREATE TABLE books (
    book_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    author VARCHAR2(100) NOT NULL,
    isbn VARCHAR2(20) UNIQUE,
    publisher VARCHAR2(100),
    publication_year NUMBER(4),
    category VARCHAR2(50),
    total_copies NUMBER(3) DEFAULT 1,
    available_copies NUMBER(3) DEFAULT 1,
    shelf_location VARCHAR2(50),
    status VARCHAR2(20) DEFAULT 'AVAILABLE' CHECK (status IN ('AVAILABLE', 'BORROWED', 'MAINTENANCE', 'LOST')),
    added_date DATE DEFAULT SYSDATE
);

-- Transactions table (for book borrowing/returning)
CREATE TABLE transactions (
    transaction_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    member_id NUMBER NOT NULL,
    book_id NUMBER NOT NULL,
    issue_date DATE DEFAULT SYSDATE,
    due_date DATE,
    return_date DATE,
    fine_amount NUMBER(8,2) DEFAULT 0,
    status VARCHAR2(20) DEFAULT 'BORROWED' CHECK (status IN ('BORROWED', 'RETURNED', 'OVERDUE')),
    created_by VARCHAR2(50),
    FOREIGN KEY (member_id) REFERENCES members(member_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);

-- Librarians table
CREATE TABLE librarians (
    librarian_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    password_hash VARCHAR2(255) NOT NULL,
    role VARCHAR2(20) DEFAULT 'LIBRARIAN' CHECK (role IN ('ADMIN', 'LIBRARIAN')),
    created_date DATE DEFAULT SYSDATE,
    status VARCHAR2(10) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE'))
);

-- Fines table
CREATE TABLE fines (
    fine_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    member_id NUMBER NOT NULL,
    transaction_id NUMBER NOT NULL,
    fine_amount NUMBER(8,2) NOT NULL,
    fine_date DATE DEFAULT SYSDATE,
    paid_date DATE,
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PAID', 'WAIVED')),
    reason VARCHAR2(200),
    FOREIGN KEY (member_id) REFERENCES members(member_id),
    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)
);

-- Create indexes for better performance
CREATE INDEX idx_members_email ON members(email);
CREATE INDEX idx_books_isbn ON books(isbn);
CREATE INDEX idx_books_title ON books(title);
CREATE INDEX idx_books_author ON books(author);
CREATE INDEX idx_transactions_member ON transactions(member_id);
CREATE INDEX idx_transactions_book ON transactions(book_id);
CREATE INDEX idx_transactions_status ON transactions(status);
CREATE INDEX idx_fines_member ON fines(member_id);

-- Insert default admin user
INSERT INTO librarians (username, first_name, last_name, email, password_hash, role) 
VALUES ('admin', 'System', 'Administrator', 'admin@library.com', 
        '$2b$10$rQZ8K9vL2mN3pQ4rS5tU6uV7wX8yZ9aA0bB1cC2dD3eE4fF5gG6hH7iI8jJ9kK0lL1mM2nN3oO4pP5qQ6rR7sS8tT9uU0vV1wW2xX3yY4zZ', 'ADMIN');

-- Create sequences for better ID management
CREATE SEQUENCE member_seq START WITH 1000;
CREATE SEQUENCE book_seq START WITH 1000;
CREATE SEQUENCE transaction_seq START WITH 1000;

-- Create views for common queries
CREATE VIEW member_borrowed_books AS
SELECT 
    m.member_id,
    m.first_name || ' ' || m.last_name AS member_name,
    b.title,
    b.author,
    t.issue_date,
    t.due_date,
    t.status,
    CASE 
        WHEN t.due_date < SYSDATE AND t.status = 'BORROWED' THEN 'OVERDUE'
        ELSE t.status
    END AS current_status
FROM members m
JOIN transactions t ON m.member_id = t.member_id
JOIN books b ON t.book_id = b.book_id
WHERE t.status = 'BORROWED';

CREATE VIEW book_availability AS
SELECT 
    b.book_id,
    b.title,
    b.author,
    b.total_copies,
    b.available_copies,
    b.status,
    CASE 
        WHEN b.available_copies > 0 THEN 'AVAILABLE'
        ELSE 'NOT_AVAILABLE'
    END AS availability_status
FROM books b;

-- Create stored procedures for common operations
CREATE OR REPLACE PROCEDURE calculate_fine(
    p_transaction_id IN NUMBER,
    p_fine_per_day IN NUMBER DEFAULT 1.00
) AS
    v_days_overdue NUMBER;
    v_fine_amount NUMBER;
BEGIN
    SELECT 
        CASE 
            WHEN due_date < SYSDATE THEN SYSDATE - due_date
            ELSE 0
        END
    INTO v_days_overdue
    FROM transactions
    WHERE transaction_id = p_transaction_id
    AND status = 'BORROWED';
    
    IF v_days_overdue > 0 THEN
        v_fine_amount := v_days_overdue * p_fine_per_day;
        
        INSERT INTO fines (member_id, transaction_id, fine_amount, reason)
        SELECT member_id, p_transaction_id, v_fine_amount, 
               'Overdue fine for ' || v_days_overdue || ' days'
        FROM transactions
        WHERE transaction_id = p_transaction_id;
    END IF;
END;
/

-- Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON members TO library_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON books TO library_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON transactions TO library_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON librarians TO library_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON fines TO library_admin;

COMMIT;
